<?php

namespace App\Http\Livewire;

use App\Models\{{modelName}};
use Illuminate\Support\Facades\Schema;
use Livewire\Component;
use Livewire\WithPagination;

class {{className}} extends Component
{
    use WithPagination;
     
    public bool $modalFormVisible = false;
    public bool $modalConfirmDeleteVisible = false;
    public  $modelId = null;

    public {{modelName}} ${{modalInstanceName}};
    public string $modelName = '{{modalInstanceName}}';
    public array $attributes;

    // Add the input type for each attribute 
    public array $inputTypes = [
            // 'attribute' => 'inputType',
    ];

    // Add rules 
    protected $rules = [
        //  'modalName.attribute' => 'required',
    ];

    public function mount(): void
    {
        $this->resetModel();
        $this->attributes = $this->getAttributes();
    }

    public function createShowModal(): void
    {
        $this->resetModel();
        $this->modelId = null;
        $this->modalFormVisible = true;
    }

    public function updateShowModal(int $id): void
    {
        $this->modelId = $id;
        $this->loadModel();
        $this->modalFormVisible = true;
    }

    public function deleteShowModal(int $id): void
    {
        $this->modelId = $id;
        $this->loadModel();
        $this->modalConfirmDeleteVisible = true;
    }

        public function store(): void
    {
        $this->validate();
        $this->{{modalInstanceName}}->save();
        $this->modalFormVisible = false;
    }

    public function update(): void
    {
        $this->validate();
        $this->{{modalInstanceName}}->update();
        $this->modelId = null;
        $this->modalFormVisible = false;
    }

    public function delete(): void
    {
        $this->{{modalInstanceName}}->delete();
        //optional :
        // $this->resetPage();
        $this->modelId = null;
        $this->modalConfirmDeleteVisible = false;
    }

        private function getAttributes(): array
    {
        if (!empty($this->{{modalInstanceName}}->getFillable())) {
            return $this->{{modalInstanceName}}->getFillable();
        } else {
            $tableName = $this->{{modalInstanceName}}->getTable();
            return Schema::getColumnListing($tableName);
        }
    }

    public function resetModel(): void
    {
        $this->{{modalInstanceName}} = new {{modelName}};
        $this->resetValidation();
    }

    public function loadModel(): void
    {
        $this->{{modalInstanceName}} = {{modelName}}::find($this->modelId);
        $this->resetValidation();
    }

    public function read()
    {
        return {{modelName}}::paginate(7);
    }

    public function render()
    {
        return view('livewire.{{viewName}}', [
            'data' => $this->read(),
        ]);
    }
}